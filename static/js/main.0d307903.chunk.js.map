{"version":3,"sources":["utils/spec-adjoin-martix.ts","utils/adjoin-martix.ts","pages/spec-choose.tsx","redux/reducer/spec-reducer.ts","redux/reducer/root-reducer.ts","redux/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SpecAdjoinMatrix","specList","specCombinationList","reduce","total","current","list","initSpec","initSameLevel","this","forEach","item","fillInSpec","specs","specsOption","getCollection","vertex","params","value","includes","push","some","Boolean","getUnions","filter","param","setAdjoinVertexs","vertx","quantity","adjoinArray","length","init","Array","fill","id","sides","pIndex","indexOf","index","col","paramsVertex","map","getVertexCol","paramsVertexSum","rowtotal","paramsColSum","getColSum","collections","unions","classNames","require","Spec","useSelector","state","spec","useState","specsS","setSpecsS","optionSpecs","useMemo","getSpecscOptions","className","title","key","i","isOption","isActive","specOption","specAction","specDisabled","onClick","bool","text","slice","handleClick","initialState","rootReducer","combineReducers","action","type","Store","createStore","App","store","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d307903.chunk.js","sourcesContent":["import AdjoinMatrix from \"./adjoin-martix\";\nimport { AdjoinType } from \"./adjoin-martix\";\nimport { SpecCategoryType, CommoditySpecsType } from \"../redux/reducer/spec-reducer\";\n\nexport default class SpecAdjoinMatrix extends AdjoinMatrix {\n  specList: Array<CommoditySpecsType>;\n  specCombinationList: Array<SpecCategoryType>;\n\n  constructor(specList: Array<CommoditySpecsType>, specCombinationList: Array<SpecCategoryType>) {\n    super(specList.reduce((total: AdjoinType, current) => [...total, ...current.list], []));\n    this.specList = specList;\n    this.specCombinationList = specCombinationList;\n    // 根据可选规格列表矩阵创建\n    this.initSpec();\n    // 同级顶点创建\n    this.initSameLevel();\n  }\n\n  /**\n   * 根据可选规格组合填写邻接矩阵的值\n   */\n  initSpec() {\n    this.specCombinationList.forEach((item) => {\n      this.fillInSpec(item.specs);\n    });\n  }\n  // 填写同级点\n  initSameLevel() {\n    // 获得初始所有可选项\n    const specsOption = this.getCollection(this.vertex);\n    this.specList.forEach((item) => {\n      const params: AdjoinType = [];\n      // 获取同级别顶点\n      item.list.forEach((value) => {\n        if (specsOption.includes(value)) params.push(value);\n      });\n      // 同级点位创建\n      this.fillInSpec(params);\n    });\n  }\n  /*\n   * @params\n   * 传入顶点数组，查询出可选规格\n   */\n  getSpecscOptions(params: AdjoinType) {\n    let specOptionCanchoose: AdjoinType = [];\n    if (params.some(Boolean)) {\n      // 获取可选项（交集）\n      specOptionCanchoose = this.getUnions(params.filter(Boolean));\n    } else {\n      // 所有可选项\n      specOptionCanchoose = this.getCollection(this.vertex);\n    }\n    return specOptionCanchoose;\n  }\n\n  /*\n   * @params\n   * 填写邻接矩阵的值\n   */\n  fillInSpec(params: AdjoinType) {\n    params.forEach((param) => {\n      this.setAdjoinVertexs(param, params);\n    });\n  }\n}\n","export type AdjoinType = Array<string>;\n\nexport default class AdjoinMatrix {\n  vertex: AdjoinType; // 顶点数组\n  quantity: number; // 矩阵长度\n  adjoinArray: Array<number>; // 矩阵数组\n\n  constructor(vertx: AdjoinType) {\n    this.vertex = vertx;\n    this.quantity = this.vertex.length;\n    this.adjoinArray = [];\n    this.init();\n  }\n  // 初始化数组\n  init() {\n    this.adjoinArray = Array(this.quantity * this.quantity).fill(0);\n  }\n\n  /*\n   * @param id string\n   * @param sides Array<string>\n   *  传入一个顶点，和当前顶点可达的顶点数组，将对应位置置为1\n   */\n  setAdjoinVertexs(id: string, sides: AdjoinType) {\n    const pIndex = this.vertex.indexOf(id);\n    sides.forEach((item) => {\n      const index = this.vertex.indexOf(item);\n      this.adjoinArray[pIndex * this.quantity + index] = 1;\n    });\n  }\n\n  /*\n   * @param id string\n   * 传入顶点的值，获取该顶点的列\n   */\n  getVertexCol(id: string) {\n    const index = this.vertex.indexOf(id);\n    const col: Array<number> = [];\n    this.vertex.forEach((item, pIndex) => {\n      col.push(this.adjoinArray[index + this.quantity * pIndex]);\n    });\n    return col;\n  }\n\n  /*\n   * @param params Array<string>\n   * 传入一个顶点数组，求出该数组所有顶点的列的合\n   */\n  getColSum(params: AdjoinType) {\n    const paramsVertex = params.map((id) => this.getVertexCol(id));\n    const paramsVertexSum: Array<number> = [];\n    this.vertex.forEach((item, index) => {\n      const rowtotal = paramsVertex\n        .map((value) => value[index])\n        .reduce((total, current) => {\n          total += current || 0;\n          return total;\n        }, 0);\n      paramsVertexSum.push(rowtotal);\n    });\n    return paramsVertexSum;\n  }\n\n  /*\n   *  @param params Array<string>\n   * 传入一个顶点数组，求出并集\n   */\n  getCollection(params: AdjoinType) {\n    const paramsColSum = this.getColSum(params);\n    let collections: AdjoinType = [];\n    paramsColSum.forEach((item, index) => {\n      if (item && this.vertex[index]) collections.push(this.vertex[index]);\n    });\n    return collections;\n  }\n\n  /*\n   *  @param params Array<string>\n   * 传入一个顶点数组，求出交集\n   */\n  getUnions(params: AdjoinType) {\n    const paramsColSum = this.getColSum(params);\n    let unions: AdjoinType = [];\n    paramsColSum.forEach((item, index) => {\n      if (item >= params.length && this.vertex[index]) unions.push(this.vertex[index]);\n    });\n    return unions;\n  }\n}\n","import React, { useState, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/reducer/root-reducer\";\nimport SpecAdjoinMatrix from \"../utils/spec-adjoin-martix\";\nimport \"./spec.css\";\nconst classNames = require(\"classnames\");\n\nconst Spec: React.FC = () => {\n  const { specList, specCombinationList } = useSelector((state: RootState) => state.spec);\n  // 已选择的规格，长度为规格列表的长度\n  const [specsS, setSpecsS] = useState(Array(specList.length).fill(\"\"));\n\n  // 创建一个规格矩阵\n  const specAdjoinMatrix = useMemo(() => new SpecAdjoinMatrix(specList, specCombinationList), [specList, specCombinationList]);\n  // 获得可选项表\n  const optionSpecs = specAdjoinMatrix.getSpecscOptions(specsS);\n\n  const handleClick = function (bool: boolean, text: string, index: number) {\n    // 排除可选规格里面没有的规格\n    if (specsS[index] !== text && !bool) return;\n    // 根据text判断是否已经被选中了\n    specsS[index] = specsS[index] === text ? \"\" : text;\n    setSpecsS(specsS.slice());\n  };\n\n  return (\n    <div className=\"container\">\n      {specList.map(({ title, list }, index) => (\n        <div key={index}>\n          <p className=\"title\">{title}</p>\n          <div className=\"specBox\">\n            {list.map((value, i) => {\n              const isOption = optionSpecs.includes(value); // 当前规格是否可选\n              const isActive = specsS.includes(value); // 当前规格是否被选\n              return (\n                <span\n                  key={i}\n                  className={classNames({\n                    specOption: isOption,\n                    specAction: isActive,\n                    specDisabled: !isOption,\n                  })}\n                  onClick={() => handleClick(isOption, value, index)}\n                >\n                  {value}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Spec;\n","export const TOGGLE = \"spec\";\n\nexport type CommoditySpecsType = {\n  title: string;\n  list: Array<string>;\n};\n\nexport type SpecCategoryType = {\n  id: string;\n  specs: Array<string>;\n};\n\nexport type SpecStateType = {\n  specList: Array<CommoditySpecsType>;\n  specCombinationList: Array<SpecCategoryType>;\n};\n\nconst initialState: SpecStateType = {\n  specList: [\n    { title: \"颜色\", list: [\"红色\", \"紫色\", \"白色\", \"黑色\"] },\n    { title: \"套餐\", list: [\"套餐一\", \"套餐二\", \"套餐三\", \"套餐四\"] },\n    { title: \"内存\", list: [\"64G\", \"128G\", \"256G\"] },\n  ],\n  specCombinationList: [\n    { id: \"1\", specs: [\"紫色\", \"套餐一\", \"64G\"] },\n    { id: \"2\", specs: [\"紫色\", \"套餐一\", \"128G\"] },\n    { id: \"3\", specs: [\"紫色\", \"套餐二\", \"128G\"] },\n    { id: \"4\", specs: [\"黑色\", \"套餐三\", \"256G\"] },\n  ],\n};\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case TOGGLE: {\n      return {\n        ...state,\n      };\n    }\n\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n","import { combineReducers } from \"redux\";\nimport specReducer from \"./spec-reducer\";\n\nexport const rootReducer = combineReducers({\n  spec: specReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducer/root-reducer\";\n\nconst Store = createStore(rootReducer);\n\nexport default Store;\n","import React from 'react';\n\nimport { Provider } from \"react-redux\";\nimport Spec from \"./pages/spec-choose\";\nimport Store from \"./redux\";\nimport 'antd/dist/antd.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Provider store={Store}>\n        <Spec />\n      </Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}